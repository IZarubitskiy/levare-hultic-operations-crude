package com.example.levarehulticops.mapper;

import org.mapstruct.*;
import com.example.levarehulticops.entity.WorkOrder;
import com.example.levarehulticops.dto.WorkOrderCreateRequest;
import com.example.levarehulticops.dto.WorkOrderUpdateRequest;
import com.example.levarehulticops.dto.WorkOrderReadDto;

/**
 * Mapper for converting between WorkOrder entity and its DTOs.
 */
@Mapper(
        componentModel = "spring",
        uses = {
                ItemMapper.class,       // maps Item ↔ ItemDto
                ItemInfoMapper.class,   // maps ItemInfo ↔ ItemInfoDto
                EmployeeMapper.class    // maps Employee ↔ EmployeeDto
        }
)
public interface WorkOrderMapper {

    /**
     * Map WorkOrder entity to read-only DTO.
     */
    WorkOrderReadDto toReadDto(WorkOrder workOrder);

    /**
     * Map create-request DTO to a new WorkOrder entity.
     * - id and version are ignored (generated by JPA)
     * - status is set to CREATED
     * - equipment lists are populated in service layer
     */
    @Mapping(target = "id", ignore = true)
    @Mapping(target = "version", ignore = true)
    @Mapping(target = "status", constant = "CREATED")
    @Mapping(target = "stockItems", ignore = true)
    @Mapping(target = "repairItems", ignore = true)
    @Mapping(target = "newRequests", ignore = true)
    WorkOrder toEntity(WorkOrderCreateRequest request);

    /**
     * Map update-request DTO onto an existing WorkOrder entity.
     * - only non-null fields are applied
     * - equipment lists are handled in service layer
     */
    @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
    @Mapping(target = "stockItems", ignore = true)
    @Mapping(target = "repairItems", ignore = true)
    @Mapping(target = "newRequests", ignore = true)
    WorkOrder updateEntityFromDto(WorkOrderUpdateRequest request, @MappingTarget WorkOrder workOrder);
}
